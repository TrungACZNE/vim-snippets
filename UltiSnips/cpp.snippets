priority -50

extends c

# We want to overwrite everything in parent ft.
priority -49

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	${1/(\w+).*/$1/} (${2:arguments});
	virtual ~${1/(\w+).*/$1/} ();

private:
	${0:/* data */}
};
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
	${VISUAL}${0}
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r"))
{
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet vector "std::vector (v)"
std::vector<${1:char}> v$0;
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

snippet comp "competitive programming template"
#include <algorithm>
#include <bitset>
#include <climits>
#include <iostream>
#include <set>
#include <map>
#include <unordered_map>
#include <vector>

using namespace std;

#define vi vector<int>
#define vs vector<string>
#define mii map<int, int>
#define msi map<string, int>
#define mss map<string, string>
#define hii unordered_map<int, int>
#define hsi unordered_map<string, int>
#define hss unordered_map<string, string>

#define _Del(X, Y)      (X).erase((X).begin() + (Y))
#define _Ins(X, A, P)   (X).insert((X).begin() + (P), (A))
#define _Find(X, Y)     (find((X).begin(), (X).end(), (Y)))
#define _FindS(X, Y, Z) (find((Z), (X).end(), (Y)))
#define _Has(X, Y)      (find((X).begin(), (X).end(), (Y)) != (X).end())

#define _Mfind(X, Y)    ((X).find((Y)))
#define _Mhas(X, Y)     ((X).find((Y)) != (X).end())

#define _S(fun, X, Y)   (fun((X).begin(), (X).end(), (Y)))
#define _Sort(X)        std::sort((X).begin(), (X).end())

int main()
{
    return 0;
}
endsnippet

snippet findall "Find all in vector"
auto ${1:i} = std::find(${2:a}.begin(), $2.end(), ${3:1});
while ($1 != $2.end()) {
	$1 = std::find($1 + 1, $2.end(), $3);
}
endsnippet

snippet readline
string line;
while (std::getline(std::cin, line)) {
	$0
}
endsnippet

snippet foriter
for (auto ${1:i} = ${2:a}.begin(); $1 != $2.end(); $1++) {
	//$1->first, $1->second
	$3
}
endsnippet

# vim:ft=snippets:
